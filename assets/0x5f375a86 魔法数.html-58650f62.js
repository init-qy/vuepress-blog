import{_ as t,r as p,o as c,c as l,a as n,b as s,d as e,e as o}from"./app-1a8b29b5.js";const r={},i=n("p",null,[s("在机缘巧合下，了解到了这么一个神奇的 16 进制数字"),n("code",null,"0x5f3759df"),s("，顺便记录一下")],-1),d=n("blockquote",null,[n("p",null,"科学改变世界，数学改变科学")],-1),u=n("p",null,[s("上回遇到的不讲道理的数字是"),n("code",null,"0.75"),s("，它出现在 Java HashMap 的源码中，含义是默认的负载因子。简单介绍一下这个值的含义：在 HashMap 中达到容量的 0.75 倍时（即容量为 16 时元素为 12 时）会对 HashMap 进行扩容，扩容的意义在于减少 hash 冲突，避免 HashMap 退化为链表而大大增加查询时间。至于这个值为什么是 0.75，有个很简单的解释："),n("strong",null,"提高空间利用率和减少查询成本的折中，主要是泊松分布，0.75 的话碰撞最小")],-1),k=n("code",null,"0x5f3759df",-1),f=n("br",null,null,-1),h={href:"https://www.zhihu.com/question/26287650?sort=created",title:"0x5f3759df这个快速开方中的常数的数学依据是什么？",target:"_blank",rel:"noopener noreferrer"},m={href:"http://h14s.p5r.org/2012/09/0x5f3759df.html",title:"0x5f3759df的数学原理 ----一种快速开方根求倒原理",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/zdy0_2004/article/details/52477640",title:"数学之美：平方根倒数速算法中的神奇数字 0x5f3759df",target:"_blank",rel:"noopener noreferrer"},_=o(`<blockquote><p>Quake-III Arena (雷神之锤 3)是 90 年代的经典游戏之一。<br> 该系列的游戏不但画面和内容不错，而且即使计算机配置低，也能极其流畅地运行。这要归功于它 3D 引擎的开发者约翰-卡马克（John Carmack）。事实上早在 90 年代初 DOS 时代，只要能在 PC 上搞个小动画都能让人惊叹一番的时候，John Carmack 就推出了石破天惊的 Castle Wolfstein, 然后再接再励，doom, doomII, Quake...每次都把 3-D 技术推到极致。他的 3D 引擎代码资极度高效，几乎是在压榨 PC 机的每条运算指令。当初 MS 的 Direct3D 也得听取他的意见，修改了不少 API。</p></blockquote><p>这个神奇的数字出现在这个 3D 引擎的底层代码中，它的作用是将一个数开平方并取倒数，经测试这段代码比(float)(1.0/sqrt(x))快 4 倍：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> <span class="token function">Q_rsqrt</span><span class="token punctuation">(</span> <span class="token keyword">float</span> number <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> i<span class="token punctuation">;</span>
    <span class="token keyword">float</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> threehalfs <span class="token operator">=</span> <span class="token number">1.5F</span><span class="token punctuation">;</span>

    x2 <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">0.5F</span><span class="token punctuation">;</span>
    y  <span class="token operator">=</span> number<span class="token punctuation">;</span>
    i  <span class="token operator">=</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token keyword">long</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>y<span class="token punctuation">;</span>                       <span class="token comment">// evil floating point bit level hacking</span>
    i  <span class="token operator">=</span> <span class="token number">0x5f3759df</span> <span class="token operator">-</span> <span class="token punctuation">(</span> i <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// what the fuck?</span>
    y  <span class="token operator">=</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token keyword">float</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
    y  <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token punctuation">(</span> threehalfs <span class="token operator">-</span> <span class="token punctuation">(</span> x2 <span class="token operator">*</span> y <span class="token operator">*</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1st iteration</span>
<span class="token comment">//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">Q3_VM</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__linux__</span></span>
    <span class="token function">assert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">isnan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bk010122 - FPE?</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="关于迭代法" tabindex="-1"><a class="header-anchor" href="#关于迭代法" aria-hidden="true">#</a> 关于迭代法</h5><p>迭代法通过旧值计算新值，循环往复，非常符合计算机语言。<br> 最经典的迭代算法是欧几里德算法（辗转相除法），用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：</p><blockquote><p>gcd(a,b) = gcd(b,a mod b)</p></blockquote><p>除此之外，常见的比如斐波那契数列，也可以用迭代法计算。一般来说，递归算法拥有很好的可读性，但往往需要更多的开销，这时可以将递归转换为递推（迭代），以期更高的效率。这一点我在做算法题时深有感触。</p><h5 id="关于牛顿迭代法" tabindex="-1"><a class="header-anchor" href="#关于牛顿迭代法" aria-hidden="true">#</a> 关于牛顿迭代法</h5>`,8),b={href:"https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/10887580?fr=aladdin",title:"牛顿迭代法-百度百科",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),y=n("br",null,null,-1),g=n("code",null,"x-f(x)/f'(x)",-1),w=n("code",null,"f(x)=a",-1),q=o("<p>简单来说比如求平方根,<code>f(x)=x^2=a</code> ,<code>f&#39;(x)= 2*x</code>,<code>f(x)/f&#39;(x)=x/2</code>,把<code>f(x)</code>代入<code>x-f(x)/f&#39;(x)</code>后有<code>(x+a/x)/2</code>，现在我们选 a=5 ,选一个猜测值比如 2，那么我们可以这么算</p><ol><li><p>5/2 = 2.5;(2.5+2)/2 = 2.25;</p></li><li><p>5/2.25 = 2.22;(2.25+2.22)/2 = 2.235;</p></li><li><p>5/2.235 = 2.23713;(2.235+2.23713)/2 = 2.236065;</p></li></ol><p>仅仅三步我们得到的值就和 sqrt(5)= 2.23606797 相差无几，可以预见，如此反复迭代其结果收敛于 sqrt(5)。一般可以迭代 4~7 次后就能得到一个相对精确的值。这是建立在猜测值相对不精确来说的，理论上，只要猜测值足够精确，就可以大幅压缩迭代次数，于是这个数<code>0x5f3759df</code>出现了。</p><p>具体的推导过程可以参考以上的博客，这边引用一下文末的结论，这同时激起我对游戏引擎的好奇。</p><p><em>如此神奇，如此怪异，如此不符合常理，如此符合常理，如此美丽。</em></p><blockquote><p>我们已经足够深入了，至少我很满足了，没有什么可以继续探究的了。对于我来说，通过这个练习，主要学到的是整形和浮点型之间的位转换操作不是没有意义的，它很怪异但却很经济的数字操作，在计算中很有用。我认为它还有更多有待发现的用处。</p></blockquote>",6);function B(E,D){const a=p("ExternalLinkIcon");return c(),l("div",null,[i,d,u,n("p",null,[s("好吧，这个解释我能接受，这个 0.75 也能接受，但是我完全无法想象"),k,s("这个玩意儿是怎么得来的完全想象不出来。"),f,s(" 以下是关于这个魔法数的背景和源码介绍，部分引用自知乎："),n("a",h,[s("0x5f3759df 这个快速开方中的常数的数学依据是什么？"),e(a)]),s("，及另一篇博客："),n("a",m,[s("0x5f3759df 的数学原理"),e(a)]),s("；中文版可以看这个："),n("a",v,[s("数学之美：平方根倒数速算法中的神奇数字 0x5f3759df"),e(a)])]),_,n("p",null,[s("简介："),n("a",b,[s("牛顿迭代法-百度百科"),e(a)]),x,s(" 300 年前的思想到现在仍然可以发光发热，数学果然是文明的基石"),y,s(" 一般 sqrt 算法就是使用牛顿迭代法,用"),g,s("来不断的逼近"),w,s("的根。")]),q])}const C=t(r,[["render",B],["__file","0x5f375a86 魔法数.html.vue"]]);export{C as default};

import{_ as o,r as p,o as c,c as r,a as s,b as n,d as a,e as t}from"./app-46d51712.js";const i={},l={href:"https://git-scm.com/book/en/v2/Git-Tools-Submodules",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/emscripten-core/emscripten",target:"_blank",rel:"noopener noreferrer"},d={href:"https://naiveui.com",target:"_blank",rel:"noopener noreferrer"},k={href:"https://web.dev/coop-coep/",target:"_blank",rel:"noopener noreferrer"},h=s("a",{href:"../tools/realcugan-ncnn-webassembly"},"工具页面",-1),m=s("h2",{id:"背景",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),n(" 背景")],-1),b={href:"https://github.com/bilibili/ailab/tree/main/Real-CUGAN",target:"_blank",rel:"noopener noreferrer"},g={href:"https://real-cugan.animesales.xyz/",target:"_blank",rel:"noopener noreferrer"},v=s("h2",{id:"过程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#过程","aria-hidden":"true"},"#"),n(" 过程")],-1),_=s("code",null,"wasm",-1),f={href:"https://github.com/hanFengSan/realcugan-ncnn-webassembly",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/nihui/realcugan-ncnn-vulkan/tree/master/models/models-pro",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"models-pro",-1),w=s("h3",{id:"git-submodule",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#git-submodule","aria-hidden":"true"},"#"),n(" git submodule")],-1),q={href:"https://github.com/hanFengSan/realcugan-ncnn-webassembly",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"git submodule",-1),N=s("code",null,"git submodule update --init",-1),E=s("code",null,"submodule",-1),O=s("code",null,"ncnn",-1),U={href:"https://github.com/nihui/realcugan-ncnn-vulkan/tree/master/models/models-pro",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>同时，我把<code>emsdk</code>放进了<code>submodule</code>中，这样就可以直接在<code>github action</code>中设置<code>emscripten</code>，完成后续的编译过程。</p><h3 id="emscripten" tabindex="-1"><a class="header-anchor" href="#emscripten" aria-hidden="true">#</a> emscripten</h3><p>因为本次并没有完整的开发<code>wasm</code>，只是根据大佬的仓库进行了一些更新和迁移，因此对其了解不深，只有三点需要注意：</p><ul><li>emscripten的版本最好指定，因为不清楚新版本是否有破坏性更新，我也没有找到详细的更新文档。</li><li><code>-sEXPORTED_FUNCTIONS</code>制定了输出函数，使其暴露在<code>Module</code>中，如果你发现<code>_xxFun not defined</code>，应该在<code>CMakeList.txt</code>中修改。</li><li>build缓存需要清空，否则可能有意料之外的问题。</li></ul><h3 id="unocss及naive-ui的引入" tabindex="-1"><a class="header-anchor" href="#unocss及naive-ui的引入" aria-hidden="true">#</a> Unocss及Naive Ui的引入</h3><p>Unocss相对简单，目前还未发现样式覆盖的问题，只需要配置即可：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">Unocss</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token operator">:</span> <span class="token string">&quot;per-module&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Naive Ui相对复杂，需要分成几点：</p><ul><li>首先是无法使用<code>unplugin</code>系列的自动引用方法来编写代码，必须要手动引用。</li><li>然后是需要在组件的最外边包裹<code>&lt;ClientOnly&gt;</code>组件，让它跳过ssg编译。</li><li>message,dialog等组件通过<code>createDiscreteApi</code>来使用。</li><li>最后需要设置ssr，这样才能build成功：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>ssr<span class="token operator">:</span> <span class="token punctuation">{</span>
  noExternal<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;naive-ui&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vueuc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date-fns&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),P={href:"https://github.com/init-qy/vuepress-blog/blob/master/docs/.vuepress/config.ts#L46-L55",target:"_blank",rel:"noopener noreferrer"},R=t(`<h3 id="wasm文件的使用" tabindex="-1"><a class="header-anchor" href="#wasm文件的使用" aria-hidden="true">#</a> wasm文件的使用</h3><p>在使用<code>emscripten</code>生成完文件后，我们需要把它们和模型文件放在同一文件夹中，使其能够读取使用这些模型。<br> 在实际开发过程中，我因为这些文件的读取位置问题有许多困扰，在生成的js文件中读取<code>.bin</code>模型使用的是相对路径，而我页面的路径为<code>/tools/realcugan-ncnn-webassembly.html</code>,也就是说它会尝试获取<code>/tools/xxx.bin</code>这个文件，这就意味着我需要把生成的<code>.js,.wasm,.bin</code>放在<code>public/tools</code>文件夹下。<br> 同时，由于支持<code>i18n</code>的原因，另一个英文网址<code>/en/tools/realcugan-ncnn-webassembly.html</code>无法读取<code>.bin</code>模型，这个问题如果是自己的服务器应该很好解决，直接给nginx写一个重定向即可，可是由于我的网站部署在<code>github.io</code>上，最简单快捷图省事的方法是在相对应的文件夹下放一份完全相同的资源文件，问题就迎刃而解，缺点是比较占仓库存储。我这里采用了一个非常hack的方法，通过<code>work server</code>强行对其进行重定向。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// do something Redirect</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.+\\/en\\/tools\\/.+\\.(js|wasm|bin|param|data|jpg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;/en/tools&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/tools&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">cache</span><span class="token operator">:</span> request<span class="token punctuation">.</span>cache<span class="token punctuation">,</span>
    <span class="token literal-property property">credentials</span><span class="token operator">:</span> request<span class="token punctuation">.</span>credentials<span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
    <span class="token literal-property property">integrity</span><span class="token operator">:</span> request<span class="token punctuation">.</span>integrity<span class="token punctuation">,</span>
    <span class="token literal-property property">destination</span><span class="token operator">:</span> request<span class="token punctuation">.</span>destination<span class="token punctuation">,</span>
    <span class="token literal-property property">keepalive</span><span class="token operator">:</span> request<span class="token punctuation">.</span>keepalive<span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> request<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>
    <span class="token literal-property property">redirect</span><span class="token operator">:</span> request<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>
    <span class="token literal-property property">referrer</span><span class="token operator">:</span> request<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span>
    <span class="token literal-property property">referrerPolicy</span><span class="token operator">:</span> request<span class="token punctuation">.</span>referrerPolicy<span class="token punctuation">,</span>
    <span class="token literal-property property">signal</span><span class="token operator">:</span> request<span class="token punctuation">.</span>signal<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2023-08-02更新" tabindex="-1"><a class="header-anchor" href="#_2023-08-02更新" aria-hidden="true">#</a> <strong>---2023-08-02更新---</strong></h4><p><code>emscripten</code>有暴露方法<code>locateFile</code>，可以对加载的文件进行重定向，使用cdn或其他URL。因此我去掉了hack的重定向方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">locateFile</span><span class="token operator">:</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> prefix<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/en/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> path
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我不太清楚多页面对wasm应用的影响，但是我的确在各个标签切换的时候出现了问题：<code>onRuntimeInitialized</code>只执行一次。因此，我采用了最方便，最快捷，最不会出错的方式解决这个问题：在进入页面时reload。<br> 这样或许会令人困惑，但这已经是我能想到的最好解法了。</p><h3 id="coop-coep" tabindex="-1"><a class="header-anchor" href="#coop-coep" aria-hidden="true">#</a> COOP-COEP</h3>`,8),F=s("s",null,"我同意该协议",-1),L=s("code",null,"sharedbuffer",-1),A={href:"https://github.com/gzuidhof/coi-serviceworker",target:"_blank",rel:"noopener noreferrer"},I={href:"https://caniuse.com/mdn-api_window_credentialless)%E3%80%82",target:"_blank",rel:"noopener noreferrer"},S=s("h2",{id:"下一步",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#下一步","aria-hidden":"true"},"#"),n(" 下一步")],-1),T=s("p",null,"有了本次的开发经验，其实能做的事情又多了很多，我理论上可以在浏览器里开发任意功能的程序，而不用在意语言、环境的限制，或许在运行速度上有所欠缺，但有句话是这么说的：能用就行。",-1);function V(z,B){const e=p("ExternalLinkIcon");return c(),r("div",null,[s("p",null,[n("仅此记录下自己大约一周的wasm页面嵌入vuepress的过程，其中涉及到许多方面的内容，包括（"),s("a",l,[n("git submodule"),a(e)]),n(","),s("a",u,[n("emscripten"),a(e)]),n(","),s("a",d,[n("naive-ui"),a(e)]),n(","),s("a",k,[n("COOP-COEP"),a(e)]),n("）这些技术的探索与使用。目前这个"),h,n("已经大致完成，并在chrome浏览器中有了较好的体验。")]),m,s("p",null,[n("一次偶然的机会我了解到b站出了一个AI工具"),s("a",b,[n("Real-CUGAN"),a(e)]),n("，并看到了其中的"),s("a",g,[n("网页wasm实现"),a(e)]),n("，然后突发奇想试试在vuepress中嵌入实现，放在我自己的博客里。")]),v,s("p",null,[n("这次的实现还是比较复杂的，中间遇到了不少问题，都是首次遇到，也算是增加了不少经验。整个"),_,n("的实现大部分参考了"),s("a",f,[n("realcugan-ncnn-webassembly"),a(e)]),n("的逻辑，但是根据"),s("a",y,[n("realcugan-ncnn-webassembly"),a(e)]),n("更新成了其中的"),x,n("。接下来我会根据每个用到的技术记录下使用过程和遇到的问题。")]),w,s("p",null,[s("a",q,[n("realcugan-ncnn-webassembly"),a(e)]),n("这个仓库作者其实没有把"),C,n("上传，因此直接克隆这个仓库并执行"),N,n("无法生效，也无法确定"),E,n("的版本，因此我使用最新版的"),O,n("跑出来的根本无法使用，最后还是根据"),s("a",U,[n("realcugan-ncnn-webassembly"),a(e)]),n("确认了版本。")]),j,s("p",null,[n("这些配置和使用看起来很简单，实际上每一条结论的得出背后都需要很多次的尝试。这些配置都在"),s("a",P,[n("本仓库"),a(e)]),n("中可以找到。")]),R,s("p",null,[n("同源策略是浏览器强加的一道坎，只有服务器签署了"),F,n("同源，才能给你提供"),L,n("，这里同样使用了一种很hack的方法来使wasm应用能正常运行，参考"),s("a",A,[n("coi-serviceworker"),a(e)]),n("，也因为这样，这个工具只能在chrome,edge运行，参考("),s("a",I,[n("https://caniuse.com/mdn-api_window_credentialless)。"),a(e)])]),S,T])}const D=o(i,[["render",V],["__file","realcugan-wasm页面开发.html.vue"]]);export{D as default};

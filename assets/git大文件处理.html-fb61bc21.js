const e=JSON.parse(`{"key":"v-10e8782e","path":"/posts/git%E5%A4%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86.html","title":"git大文件处理","lang":"zh-CN","frontmatter":{"title":"git大文件处理","date":"2023-04-16T12:21:06.000Z","tag":["git"],"category":["DevOps"],"description":"背景 最近在开发flutter+unity的手机 app 项目，因为第一次开发unity，并不是很了解unity的文件目录，有很多测试用资产(Assets)中的 3d 模型文件也被放进了git中，这就造成了git仓库的庞大。 其实这种资产管理用svn处理会更好，毕竟包含了大量图片，音频及二进制文件，但目前项目很小，用git管理也还好。 步骤 查看 git 仓库大小 git count-objects -vH 查看有哪些大文件 git rev-list --objects --all | grep \\"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk '{print$1}')\\" 从 git 所有分支历史中删除该文件 git filter-branch --force --index-filter 'git rm -rf --cached --ignore-unmatch &lt;bigfile&gt;' --prune-empty --tag-name-filter cat -- --all 回收本地空间 rm -rf .git/refs/original/ git reflog expire --expire=now --all git gc --prune=now git gc --aggressive --prune=now 推送到远端仓库 git push origin --force --all","head":[["link",{"rel":"canonical","href":"https://init-qy.github.io/vuepress-blog/posts/git%E5%A4%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://init-qy.github.io/vuepress-blog/en/posts/git%E5%A4%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:url","content":"https://init-qy.github.io/vuepress-blog/posts/git%E5%A4%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"init-qy的博客"}],["meta",{"property":"og:title","content":"git大文件处理"}],["meta",{"property":"og:description","content":"背景 最近在开发flutter+unity的手机 app 项目，因为第一次开发unity，并不是很了解unity的文件目录，有很多测试用资产(Assets)中的 3d 模型文件也被放进了git中，这就造成了git仓库的庞大。 其实这种资产管理用svn处理会更好，毕竟包含了大量图片，音频及二进制文件，但目前项目很小，用git管理也还好。 步骤 查看 git 仓库大小 git count-objects -vH 查看有哪些大文件 git rev-list --objects --all | grep \\"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk '{print$1}')\\" 从 git 所有分支历史中删除该文件 git filter-branch --force --index-filter 'git rm -rf --cached --ignore-unmatch &lt;bigfile&gt;' --prune-empty --tag-name-filter cat -- --all 回收本地空间 rm -rf .git/refs/original/ git reflog expire --expire=now --all git gc --prune=now git gc --aggressive --prune=now 推送到远端仓库 git push origin --force --all"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-16T06:56:09.000Z"}],["meta",{"property":"article:author","content":"init-qy"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:published_time","content":"2023-04-16T12:21:06.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-16T06:56:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git大文件处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-16T12:21:06.000Z\\",\\"dateModified\\":\\"2023-04-16T06:56:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"init-qy\\",\\"url\\":\\"https://github.com/init-qy\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"createdTime":1681628169000,"updatedTime":1681628169000,"contributors":[{"name":"init-qy","email":"953218204@qq.com","commits":1}]},"readingTime":{"minutes":1.18,"words":354},"filePathRelative":"posts/git大文件处理.md","localizedDate":"2023年4月16日","excerpt":"<h2> 背景</h2>\\n<p>最近在开发<code>flutter+unity</code>的手机 app 项目，因为第一次开发<code>unity</code>，并不是很了解<code>unity</code>的文件目录，有很多测试用资产(Assets)中的 3d 模型文件也被放进了<code>git</code>中，这就造成了<code>git</code>仓库的庞大。</p>\\n<p>其实这种资产管理用<code>svn</code>处理会更好，毕竟包含了大量图片，音频及二进制文件，但目前项目很小，用<code>git</code>管理也还好。</p>\\n<h2> 步骤</h2>\\n<ol>\\n<li>\\n<p>查看 git 仓库大小</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> count-objects <span class=\\"token parameter variable\\">-vH</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>查看有哪些大文件</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> rev-list <span class=\\"token parameter variable\\">--objects</span> <span class=\\"token parameter variable\\">--all</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">grep</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token function\\">git</span> verify-pack <span class=\\"token parameter variable\\">-v</span> .git/objects/pack/*.idx <span class=\\"token operator\\">|</span> <span class=\\"token function\\">sort</span> <span class=\\"token parameter variable\\">-k</span> <span class=\\"token number\\">3</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">tail</span> <span class=\\"token parameter variable\\">-10</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">awk</span> <span class=\\"token string\\">'{print$1}'</span><span class=\\"token variable\\">)</span></span>\\"</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>从 git 所有分支历史中删除该文件</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> filter-branch <span class=\\"token parameter variable\\">--force</span> --index-filter <span class=\\"token string\\">'git rm -rf --cached --ignore-unmatch &lt;bigfile&gt;'</span> --prune-empty --tag-name-filter <span class=\\"token function\\">cat</span> -- <span class=\\"token parameter variable\\">--all</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>回收本地空间</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">rm</span> <span class=\\"token parameter variable\\">-rf</span> .git/refs/original/\\n<span class=\\"token function\\">git</span> reflog expire <span class=\\"token parameter variable\\">--expire</span><span class=\\"token operator\\">=</span>now <span class=\\"token parameter variable\\">--all</span>\\n<span class=\\"token function\\">git</span> gc <span class=\\"token parameter variable\\">--prune</span><span class=\\"token operator\\">=</span>now\\n<span class=\\"token function\\">git</span> gc <span class=\\"token parameter variable\\">--aggressive</span> <span class=\\"token parameter variable\\">--prune</span><span class=\\"token operator\\">=</span>now\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>推送到远端仓库</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> push origin <span class=\\"token parameter variable\\">--force</span> <span class=\\"token parameter variable\\">--all</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}`);export{e as data};

const e=JSON.parse('{"key":"v-4dbbba27","path":"/posts/%E5%85%B3%E4%BA%8Ejs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%A0%94%E7%A9%B6.html","title":"关于js异步编程的一点研究","lang":"zh-CN","frontmatter":{"title":"关于js异步编程的一点研究","date":"2021-01-05T11:19:21.000Z","tag":["js"],"category":["前端开发"],"description":"前言 最近在看阮老师的JavaScript 基础和 es6 文档，其中关于异步的处理，我觉得有必要整理一下。这有助于我逐步改善自己的编程风格，提升代码质量。 Promise 文档传送门：Promise 对象 promise 已经是现如今最广泛使用的异步解决方案，几乎已经没有人去使用回调来解决异步问题。callback 最广为人知的问题是回调地狱，因此 promise 应运而生。然鹅，promise 的链式调用也没有从根本上解决这个问题，.then()的调用只是换了一种写法；同时，promise 的错误处理也是一个大麻烦。 Promise.all()","head":[["meta",{"property":"og:url","content":"https://init-qy.github.io/vuepress-blog/posts/%E5%85%B3%E4%BA%8Ejs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%A0%94%E7%A9%B6.html"}],["meta",{"property":"og:site_name","content":"init-qy的博客"}],["meta",{"property":"og:title","content":"关于js异步编程的一点研究"}],["meta",{"property":"og:description","content":"前言 最近在看阮老师的JavaScript 基础和 es6 文档，其中关于异步的处理，我觉得有必要整理一下。这有助于我逐步改善自己的编程风格，提升代码质量。 Promise 文档传送门：Promise 对象 promise 已经是现如今最广泛使用的异步解决方案，几乎已经没有人去使用回调来解决异步问题。callback 最广为人知的问题是回调地狱，因此 promise 应运而生。然鹅，promise 的链式调用也没有从根本上解决这个问题，.then()的调用只是换了一种写法；同时，promise 的错误处理也是一个大麻烦。 Promise.all()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-14T02:29:34.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2021-01-05T11:19:21.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-14T02:29:34.000Z"}],["link",{"rel":"canonical","href":"https://init-qy.github.io/vuepress-blog/posts/%E5%85%B3%E4%BA%8Ejs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%A0%94%E7%A9%B6.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://init-qy.github.io/vuepress-blog/en/posts/%E5%85%B3%E4%BA%8Ejs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%A0%94%E7%A9%B6.html"}]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"Promise","slug":"promise","link":"#promise","children":[]},{"level":2,"title":"async/await","slug":"async-await","link":"#async-await","children":[]},{"level":2,"title":"持续学习","slug":"持续学习","link":"#持续学习","children":[]}],"git":{"createdTime":1670984974000,"updatedTime":1670984974000,"contributors":[{"name":"init-qy","email":"953218204@qq.com","commits":1}]},"readingTime":{"minutes":4.12,"words":1236},"filePathRelative":"posts/关于js异步编程的一点研究.md","localizedDate":"2021年1月5日","excerpt":"<h2> 前言</h2>\\n<p>最近在看阮老师的<a href=\\"https://wangdoc.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JavaScript 基础和 es6 文档</a>，其中关于异步的处理，我觉得有必要整理一下。这有助于我逐步改善自己的编程风格，提升代码质量。</p>\\n<h2> Promise</h2>\\n<p>文档传送门：<a href=\\"https://wangdoc.com/es6/promise.html\\" title=\\"Promise 对象\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Promise 对象</a>\\npromise 已经是现如今最广泛使用的异步解决方案，几乎已经没有人去使用回调来解决异步问题。callback 最广为人知的问题是回调地狱，因此 promise 应运而生。然鹅，promise 的链式调用也没有从根本上解决这个问题，.then()的调用只是换了一种写法；同时，promise 的错误处理也是一个大麻烦。\\n<strong>Promise.all()</strong></p>","autoDesc":true}');export{e as data};

import{_ as i,L as o,M as l,N as n,a7 as s,U as a,a8 as t,A as c}from"./framework.a43b87a8.js";const r={},p=t(`<h2 id="过程" tabindex="-1"><a class="header-anchor" href="#过程" aria-hidden="true">#</a> 过程</h2><p>由于需要在 vue 项目中使用 echarts 图表，基于 canvas 的 echarts 不能随窗口大小改变而改变。这时就需要监听窗口大小，并实时执行 echarts 的 resize 方法。</p><h3 id="向-window-对象添加事件句柄" tabindex="-1"><a class="header-anchor" href="#向-window-对象添加事件句柄" aria-hidden="true">#</a> 向 Window 对象添加事件句柄</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>mounted() { window.addEventListener(&#39;resize&#39;, this.resizeHandler) }, destroyed()
{ window.removeEventListener(&#39;resize&#39;, this.resizeHandler) }, methods:{
resizeHandler(){ // do something } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-window-的-onresize-中挂载方法" tabindex="-1"><a class="header-anchor" href="#在-window-的-onresize-中挂载方法" aria-hidden="true">#</a> 在 window 的 onresize 中挂载方法</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>watch: { screenWidth(val) { //
为了避免频繁触发resize函数导致页面卡顿，使用定时器 if (!this.timer) { //
一旦监听到的screenWidth值改变，就将其重新赋给data里的screenWidth
this.screenWidth = val this.timer = true const that = this setTimeout(function()
{ // 打印screenWidth变化的值 console.log(that.screenWidth) that.timer = false //
do something }, 400) } } }, mounted () { // 监听页面大小变化 const that = this
window.onresize = () =&gt; { return (() =&gt; { window.screenWidth =
document.body.clientWidth that.screenWidth = window.screenWidth })() } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法略显臃肿，而且 data 里还需要额外维护两个变量</p><h3 id="使用-resize-observer-polyfill-监听-dom-大小变化" tabindex="-1"><a class="header-anchor" href="#使用-resize-observer-polyfill-监听-dom-大小变化" aria-hidden="true">#</a> 使用 resize-observer-polyfill 监听 dom 大小变化</h3>`,8),d={href:"https://www.jianshu.com/p/2089f3a5b9a4",title:"使用element-ui封装好的resize事件方法",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>使用代码转自这位老哥：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 先引入</span>
<span class="token comment">// 如果项目使用了element-ui，可以直接引用，或者copy一份放在自己的代码里</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  addResizeListener<span class="token punctuation">,</span>
  removeResizeListener<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;element-ui/src/utils/resize-event&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以在mounted这个钩子里初始化事件</span>
    <span class="token function">addResizeListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">resizeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// do something</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 生命周期结束时销毁事件</span>
  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resizeListener<span class="token punctuation">)</span>
      <span class="token function">removeResizeListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整理" tabindex="-1"><a class="header-anchor" href="#整理" aria-hidden="true">#</a> 整理</h2><p>在整个过程中，跟着源码看到了不少东西，不过没有系统性的去学习，只是大概了解了一下，这里做个整理</p>`,4),v={href:"https://ponyfoo.com/articles/polyfills-or-ponyfills#ponyfills",title:"Polyfills or Ponyfills?",target:"_blank",rel:"noopener noreferrer"},h={href:"https://echarts.apache.org/zh/index.html",title:"echarts官网",target:"_blank",rel:"noopener noreferrer"},m=n("em",null,"（在 2021.1.28 明天，echarts 出新版本了。我看了一下，除了 canvas，也有用 svg 渲染的图）",-1),k={href:"https://github.com/que-etc/resize-observer-polyfill",title:"resize-observer-polyfill",target:"_blank",rel:"noopener noreferrer"};function b(_,f){const e=c("ExternalLinkIcon");return o(),l("div",null,[p,n("p",null,[s("这个方法相比于前两个只能监听 window 大小变化，它可以监听元素大小变化。可以对页面中一些可变元素进行响应，使用方法来自 element-ui 源码，感谢这位老哥的发现："),n("a",d,[s("使用 element-ui 封装好的 resize 事件方法"),a(e)])]),u,n("ol",null,[n("li",null,[n("a",v,[s("Polyfills or Ponyfills?"),a(e)])]),n("li",null,[n("a",h,[s("echarts 官网"),a(e)]),s(),m]),n("li",null,[n("a",k,[s("resize-observer-polyfill"),a(e)])])])])}const y=i(r,[["render",b],["__file","关于监听浏览器窗口大小的一些记录.html.vue"]]);export{y as default};

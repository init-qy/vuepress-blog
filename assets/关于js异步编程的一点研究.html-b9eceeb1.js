import{_ as o,r as p,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-c1fb5501.js";const l={},u=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),r={href:"https://wangdoc.com/",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"promise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise","aria-hidden":"true"},"#"),s(" Promise")],-1),k={href:"https://wangdoc.com/es6/promise.html",title:"Promise Object",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>Promise is currently the most widely used solution for asynchronous operations, and almost no one uses callbacks to solve asynchronous problems anymore. The most well-known problem with callbacks is callback hell, which is why Promise was born. However, the chaining of Promise calls does not fundamentally solve this problem; the use of <code>.then()</code> is just a different way of writing. At the same time, error handling with Promise can also be quite troublesome.</p><h3 id="promise-all" tabindex="-1"><a class="header-anchor" href="#promise-all" aria-hidden="true">#</a> Promise.all()</h3><blockquote><p>The <code>Promise.all()</code> method is used to wrap multiple Promise instances into a new Promise instance.</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In the above code, the <code>Promise.all()</code> method accepts an array as a parameter. <code>p1</code>, <code>p2</code>, and <code>p3</code> are all Promise instances. If they are not, the <code>Promise.resolve</code> method mentioned below will be called first to convert the parameters into Promise instances before further processing. In addition, the parameter of the <code>Promise.all()</code> method does not have to be an array, but it must have the Iterator interface, and each member returned must be a Promise instance.<br> The state of <code>p</code> is determined by <code>p1</code>, <code>p2</code>, and <code>p3</code>, and there are two scenarios.<br> (1) Only when the states of <code>p1</code>, <code>p2</code>, and <code>p3</code> are all fulfilled, the state of <code>p</code> will become fulfilled. At this time, the return values of <code>p1</code>, <code>p2</code>, and <code>p3</code> will be combined into an array and passed to the callback function of <code>p</code>.<br> (2) As long as one of <code>p1</code>, <code>p2</code>, and <code>p3</code> is rejected, the state of <code>p</code> will become rejected. At this time, the return value of the first rejected instance will be passed to the callback function of <code>p</code>.</p><p>Let&#39;s take a look at an example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token string">&quot;运行结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这时我需要调用sleep两次,这两次调用需要同时进行,并在两次调用都返回值后打印总运行时间</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;总共运行时间为&quot;</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; 2000</span>
<span class="token comment">// &gt; 1000</span>
<span class="token comment">// &gt; &quot;1000运行结束&quot;</span>
<span class="token comment">// &gt; &quot;2000运行结束&quot;</span>
<span class="token comment">// &gt; &quot;总共运行时间为2.001&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method can be applied in the case of simultaneous requests for multiple HTTP. It should be noted that error handling in this case needs to be handled differently: if the original Promise instance has its own catch handling, the catch of <code>all</code> will not be triggered, otherwise, the catch of <code>all</code> will be triggered.</p><h3 id="promise-race" tabindex="-1"><a class="header-anchor" href="#promise-race" aria-hidden="true">#</a> Promise.race()</h3><p>This method is similar to <code>all</code>, but the difference is that as long as one Promise changes its state first (either resolve or reject), the callback will be passed. I haven&#39;t thought of any specific application direction for this method yet (it seems similar to the high-concurrency process of flash sales).</p><h3 id="promise-any" tabindex="-1"><a class="header-anchor" href="#promise-any" aria-hidden="true">#</a> Promise.any()</h3><p><code>Promise.any()</code> is similar to <code>Promise.race()</code>, with one difference: it does not end because one Promise becomes rejected.<br> This is a new method introduced in ES2021. <s>Use with caution</s></p><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h2>`,13),h={href:"https://wangdoc.com/es6/async.html",title:"async function",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"What is an async function? In short, it is the syntax sugar of a Generator function.")],-1),f={href:"https://www.zhihu.com/question/290681846",title:"What are the special features of Generator functions in ES6+?",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h3><p>As syntax sugar, the above code can be simplified as follows:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 少了.then()的链式调用，代码清晰了不少</span>
  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;总共运行时间为&quot;</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>sleep()</code> function can also be written using the async/await syntax. Apart from the different syntax, the actual execution effect is the same:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token string">&quot;运行结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error Handling</h3><p>If multiple async functions are used with await, the subsequent functions will not be executed when the previous function returns a reject. To prevent errors, they need to be placed within a try...catch block.<br> Here is an example from the documentation that demonstrates multiple retry attempts.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> superagent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;superagent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">NUM_RETRIES</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">NUM_RETRIES</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> superagent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://google.com/this-throws-an-error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="continuous-learning" tabindex="-1"><a class="header-anchor" href="#continuous-learning" aria-hidden="true">#</a> Continuous Learning</h2><p>Regarding asynchronous programming in JavaScript, I admit that I still don&#39;t fully understand it. I only know the syntax and some principles. I need to continue learning and see if I encounter any problems in practical applications.</p><p><em>Some good articles (may be updated):</em></p>`,11),g={href:"https://zhuanlan.zhihu.com/p/83965949",title:"Implementing Promises/A+ Specification in 100 Lines of Code",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zhuanlan.zhihu.com/p/42649246",title:"Hey guys, try out this syntactic sugar called Async Functions",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/linyuxuanlin/Wiki_MkDocs/issues/new",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"feedback",-1);function P(x,q){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("Recently, I have been reading "),n("a",r,[s("JavaScript Basics and ES6 Documentation"),e(a)]),s(" by Teacher Ruan. I feel it is necessary to organize the content related to asynchronous handling. This will help me gradually improve my programming style and enhance the quality of my code.")]),d,n("p",null,[s("Documentation link: "),n("a",k,[s("Promise Object"),e(a)])]),m,n("p",null,[s("Documentation link: "),n("a",h,[s("async function"),e(a)])]),v,n("p",null,[s("The documentation mentions Generator functions, which I briefly looked at. Its asynchronous application seems to be just an extension of its application, and it itself implements the step-by-step execution of functions. With async/await, it seems that there is no need to use it to implement asynchronous operations. Reference: "),n("a",f,[s("What are the special features of Generator functions in ES6+?"),e(a)])]),b,n("ol",null,[n("li",null,[n("a",g,[s("Implementing Promises/A+ Specification in 100 Lines of Code"),e(a)])]),n("li",null,[n("a",y,[s("Hey guys, try out this syntactic sugar called Async Functions"),e(a)])])]),n("blockquote",null,[n("p",null,[s("This post is translated using ChatGPT, please "),n("a",w,[_,e(a)]),s(" if any omissions.")])])])}const I=o(l,[["render",P],["__file","关于js异步编程的一点研究.html.vue"]]);export{I as default};

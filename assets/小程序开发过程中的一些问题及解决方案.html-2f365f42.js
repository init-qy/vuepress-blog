import{_ as s,r as i,o as r,c,a as e,b as n,d as a,e as o}from"./app-46d51712.js";const l={},d=o('<h2 id="preface" tabindex="-1"><a class="header-anchor" href="#preface" aria-hidden="true">#</a> Preface</h2><p>Recently, I completed a mini-program for content distribution. The core functionality includes editing, uploading, and commenting on articles (<s>plus WeChat Official Account</s>). The framework used for this project is mpvue and vant-weapp. I chose this framework because it is the one I am most familiar with. The main reason for this choice is that the project was quite rushed. Although I had previously studied uniapp, I had never used it to write a project. It would take time to learn and troubleshoot, so I ultimately decided to use this technology framework as the foundation for this mini-program. Since I had never worked on this type of mini-program before, I encountered some issues with uncommon WeChat components.</p><h2 id="troubleshooting-record" tabindex="-1"><a class="header-anchor" href="#troubleshooting-record" aria-hidden="true">#</a> Troubleshooting Record</h2><h3 id="editor-component" tabindex="-1"><a class="header-anchor" href="#editor-component" aria-hidden="true">#</a> editor component</h3><p>Editing articles is one of the core functionalities. After discussing with the backend team, we decided on the simplest solution, which is to store the articles as rich text. The rich-text component can be used to display the articles in the mini-program, and there are no issues with the backend management system as well since the data is stored as text in the database. We used tinymce for rich text editing in the backend management system, but for the mini-program, I could only find the editor component.</p><p>The issues encountered with the editor component are as follows:</p>',6),p=e("li",null,"The editor component does not support scrolling, and the cursor can only be moved within the input box.",-1),h=e("li",null,"When the editor component reaches the bottom and the user presses enter, the cursor moves to the bottom and becomes invisible. It only becomes visible when content is entered.",-1),u={href:"https://developers.weixin.qq.com/community/develop/article/doc/000e2667890ee0284598518f65bc13",title:"Rich Text Editor Encapsulation",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,"Although the editor component has comprehensive input functionalities, such as uploading images and resizing, the user experience is poor on actual devices and requires a learning curve. The focus of the component conflicts with custom key events, causing the keyboard to keep popping up.",-1),f=o(`<p>Due to these issues, we ended up removing most of the functionalities of the editor component and only kept the basic text editing functionality. More advanced styling editing was left to the web backend. Here are a few improvement ideas I have, which can be considered based on the project&#39;s future requirements.</p><ul><li>Replace the editor component with a textarea and image upload functionality to generate rich text content for submission to the backend. Users can choose to add paragraphs or images, reducing the operation cost. The drawback is that custom styling is not supported, but having a unified style can help maintain consistency in the mini-program&#39;s display. I believe this is the most cost-effective approach until we have the capability to achieve the same level of technical sophistication as WeChat Official Account editing.</li><li>When editing, navigate to a page that only contains the editor component and remove all other components to focus on resolving the keyboard issues. This solution requires further research and carries some risks.</li><li>Develop a custom virtual keyboard to incorporate custom key events. This could be the ultimate solution. (<s>WeChat Official Account can take inspiration from this</s>)</li><li>Wait for the official fix for the bugs (<s>which may be indefinitely delayed</s>).</li></ul><h3 id="different-display-on-ios-and-android" tabindex="-1"><a class="header-anchor" href="#different-display-on-ios-and-android" aria-hidden="true">#</a> Different display on iOS and Android</h3><p>This issue has been around for a while. In fact, one of the innovations of WeChat mini-programs is the ability to run on both iOS and Android devices with the same user experience (<s>although some special models have their own unique bugs, like the iPhone X</s>). But let&#39;s be honest, if there&#39;s a pit, we&#39;ll wait for someone to fall into it, and if there&#39;s a bug, we&#39;ll have to fix it.</p><p><strong>iOS has different formatting requirements for the <code>new Date()</code> method in JavaScript compared to Android.</strong><br> This issue was discovered in a previous mini-program, and I want to mention it again this time. Generally, the date format stored in the backend is <code>yyyy-MM-dd</code>, and the <code>new Date()</code> method in JavaScript can correctly parse this format. However, iOS is different. Its JavaScript only supports parsing the date format <code>yyyy/MM/dd</code>. Since ordinary Android phones also support parsing this format, the date string received from the backend needs to be uniformly processed:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dateString <span class="token operator">=</span> <span class="token string">&quot;2020-12-14 00:00:00&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>For those who find this troublesome, you can request (<s>threaten</s>) the backend team to perform unified data processing. In general, the backend (in this case, Java) can achieve this through annotations in fastjson (one by one), or by configuring a unified interceptor to handle date data formats (these configurations are usually used for converting long to string, as JavaScript&#39;s number type has precision loss when compared to Java&#39;s long type).</p><p><strong>Issue with losing focus on input in iOS (possible bug)</strong><br> In general form design, it usually involves input and picker. In the iOS real machine experience, when you first click on the input box and then click on the picker (native picker or vant component picker are the same), the keyboard does not automatically close.<br> The solution here is to call a WeChat API <code>wx.hideKeyboard()</code>, but the downside is that it cannot be displayed properly in the developer tool.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">popup</span><span class="token punctuation">(</span><span class="token parameter">showPicker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(this[showPicker])</span>
      <span class="token comment">// this[showPicker] = true</span>
      <span class="token comment">// 解决ios键盘不收起的问题,开发者工具时可以注掉</span>
      wx<span class="token punctuation">.</span><span class="token function">hideKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">[</span>showPicker<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),g=e("strong",null,[n("The behavior of "),e("code",null,"position: fixed;"),n(" in iOS with the editor component is different from Android")],-1),b=e("br",null,null,-1),k={href:"https://developers.weixin.qq.com/community/develop/doc/0000e243b5ce78da475b5d6be5b400?highLine=position%253A%2520fixed",title:"bug report",target:"_blank",rel:"noopener noreferrer"},v=e("br",null,null,-1),y=o('<blockquote><p>In iOS, you can only manually set the bottom distance after obtaining the keyboard height.</p></blockquote><p>It&#39;s worth a try.</p><h2 id="reflection-and-consideration" tabindex="-1"><a class="header-anchor" href="#reflection-and-consideration" aria-hidden="true">#</a> Reflection and Consideration</h2><p>This project is not considered large in scale, with a total of 25 pages, of which only two pages are similar (one tabbar page and one regular page, where passing parameters in the tabbar page is not ideal). Many manuscript list pages are reused, which works well. Due to the tight schedule of the project, no business components were developed, and some similar elements (such as the manuscript item in the list) were not reused, requiring synchronous modification of the UI. Fortunately, there are not many pages to take care of.<br> Looking back at the entire development process, there are a few areas that still need improvement:</p><ul><li>Design several commonly used page templates (list, detail, info) and organize several commonly used methods (pagination, input, page navigation) to greatly accelerate development speed.</li><li>When using UI components, it may be necessary to fork a customized version and develop it accordingly.</li><li>Documentation is needed for frontend-backend interaction, otherwise, maintenance in the later stage can be very troublesome.</li><li>Module differentiation can be achieved through naming, making it easier to migrate modules when encountering similar business requirements in the future.</li><li>Learn modular development of style classes to facilitate unified modification.</li><li>Use ScreenToGif software to record dynamic effects, which facilitates reflection and consideration for learning and growth (<s>and maybe write a blog post</s>).</li></ul>',5),w={href:"https://github.com/linyuxuanlin/Wiki_MkDocs/issues/new",target:"_blank",rel:"noopener noreferrer"},_=e("strong",null,"feedback",-1);function x(I,T){const t=i("ExternalLinkIcon");return r(),c("div",null,[d,e("ul",null,[p,h,e("li",null,[n("The editor component provides many APIs, but many functionalities need to be implemented manually. You can refer to this article by a fellow developer for a custom rich text editor implementation: "),e("a",u,[n("Rich Text Editor Encapsulation"),a(t)]),n(".")]),m]),f,e("p",null,[g,b,n(" For specific information, you can refer to this "),e("a",k,[n("bug report"),a(t)]),n("."),v,n(" Currently, it is only a poor user experience and has not been fixed. You can try the approach mentioned in the second floor comment.")]),y,e("blockquote",null,[e("p",null,[n("This post is translated using ChatGPT, please "),e("a",w,[_,a(t)]),n(" if any omissions.")])])])}const S=s(l,[["render",x],["__file","小程序开发过程中的一些问题及解决方案.html.vue"]]);export{S as default};
